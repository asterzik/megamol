<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="pullpush">
    <include file="protein"/>

    <namespace name="ses">
       
        <shader name="pullNormal">
            <snippet type="version">430</snippet>
            <snippet name="::protein::commondefines"/>
            <snippet type="string">
<!--
out vec4 fragNormal;

uniform float lf;
uniform int level;

uniform sampler2D inputTex_fragNormal;
uniform sampler2D inputTex_fragBarycenter;
uniform sampler2D inputTex_fragPosition;
uniform sampler2D pyramid_fragNormal;

vec4 getBlTlTrBrInverseDistanceWeights() {
    vec4 fragPosition = texelFetch(inputTex_fragPosition, ivec2(gl_FragCoord.xy), level);

    vec4 fragPosition_bl = (texelFetch(inputTex_fragPosition, ivec2(gl_FragCoord.xy) * 2 + ivec2(0), level-1));
    vec4 fragPosition_tl = (texelFetch(inputTex_fragPosition, ivec2(gl_FragCoord.xy) * 2 + ivec2(0, 1), level-1));
    vec4 fragPosition_tr = (texelFetch(inputTex_fragPosition, ivec2(gl_FragCoord.xy) * 2 + ivec2(1), level-1));
    vec4 fragPosition_br = (texelFetch(inputTex_fragPosition, ivec2(gl_FragCoord.xy) * 2 + ivec2(1, 0), level-1));

    float exp = 2;
    return vec4(
    1.0 / pow(length(fragPosition.xyz - fragPosition_bl.xyz), exp),
    1.0 / pow(length(fragPosition.xyz - fragPosition_tl.xyz), exp),
    1.0 / pow(length(fragPosition.xyz - fragPosition_tr.xyz), exp),
    1.0 / pow(length(fragPosition.xyz - fragPosition_br.xyz), exp)
    );
}

void pull(out vec4 pulledFragNormal)
{
    // read all finer pixels' values
    vec4 fn_bl = (texelFetch(pyramid_fragNormal, ivec2(gl_FragCoord.xy) * 2 + ivec2(0), level-1));
    vec4 fn_tl = (texelFetch(pyramid_fragNormal, ivec2(gl_FragCoord.xy) * 2 + ivec2(0, 1), level-1));
    vec4 fn_tr = (texelFetch(pyramid_fragNormal, ivec2(gl_FragCoord.xy) * 2 + ivec2(1), level-1));
    vec4 fn_br = (texelFetch(pyramid_fragNormal, ivec2(gl_FragCoord.xy) * 2 + ivec2(1, 0), level-1));

//    vec4 distanceWeights = getBlTlTrBrInverseDistanceWeights();
//    float distanceWeightsSum = distanceWeights.x + distanceWeights.y + distanceWeights.z + distanceWeights.w;
    vec4 distanceWeights = vec4(1);
    float distanceWeightsSum = 4.0;

    pulledFragNormal.xyz =
    fn_bl.xyz * fn_bl.w * distanceWeights.x
    + fn_tl.xyz * fn_tl.w * distanceWeights.y
    + fn_tr.xyz * fn_tr.w * distanceWeights.z
    + fn_br.xyz * fn_br.w * distanceWeights.w;

    pulledFragNormal.w =
    fn_bl.w * distanceWeights.x
    + fn_tl.w * distanceWeights.y
    + fn_tr.w * distanceWeights.z
    + fn_br.w * distanceWeights.w;

    if (any(isnan(pulledFragNormal.xyz)) || any(isinf(pulledFragNormal.xyz))) {
        pulledFragNormal = vec4(0);
        return;
    }

    if (pulledFragNormal.xyz != vec3(0)) {
        pulledFragNormal.xyz = normalize(pulledFragNormal.xyz);
        pulledFragNormal.w = min(1, pulledFragNormal.w / distanceWeightsSum * 4);
    } else {
        pulledFragNormal.w = 0;
    }
}

void main() {
    fragNormal = vec4(0);

    if (level == 0) {
        fragNormal = texelFetch(inputTex_fragNormal, ivec2(gl_FragCoord.xy), 0);
        float fragBarycenter = texelFetch(inputTex_fragBarycenter, ivec2(gl_FragCoord.xy), 0).x;
        float fragZ = abs(texelFetch(inputTex_fragPosition, ivec2(gl_FragCoord.xy), 0).z);

        float distanceWeight = fragZ*fragZ;

        if (fragNormal.xyz != vec3(0)) {
            fragNormal.w = 0.001 * distanceWeight; // weight for this pixel
        } else {
            fragNormal.w = 0;// no weight for this void pixel
        }
        return;
    }

    pull(fragNormal);
}

}
-->
            </snippet>
        </shader>

        <shader name="pushNormal">
            <snippet type="version">430</snippet>
            <snippet name="::protein::commondefines"/>
            <snippet type="string">
<!--
out vec4 fragNormal;

uniform sampler2D pyramid_fragNormal;

uniform float lf;
uniform int level;
uniform int level_max;

void addTexel(ivec2 offset, inout vec4 pushedFragNormal, inout float factor_sum, float factor)
{
    ivec2 c = offset + ivec2(gl_FragCoord.xy / 2);
    int max_coord = int(0.5/lf - 1);
    if (c.x < 0 || c.y < 0 || c.x > max_coord || c.y > max_coord)
    return;

    vec4 n = (texelFetch(pyramid_fragNormal, c, level + 1));

    if (any(isnan(n)) || any(isinf(n))) {
        return;
    }

    if( n.xyz != vec3(0)) {
        pushedFragNormal.xyz += normalize(n.xyz) * factor * n.w ;
        pushedFragNormal.w += n.w * factor * n.w ;
        factor_sum += factor * n.w ;
    }
}

void push(out vec4 pushedFragNormal)
{
    pushedFragNormal = vec4(0);
    float f_sum = 0;

    vec4 originalFragNormal = texelFetch(pyramid_fragNormal, ivec2(gl_FragCoord.xy), level);

    if (originalFragNormal.w == 1.0){
        pushedFragNormal = originalFragNormal;
        return;
    }

    addTexel(ivec2(0, 0),  pushedFragNormal, f_sum, 9);
    if (int(gl_FragCoord.x) % 2 == 0) {
        if (int(gl_FragCoord.y) % 2 == 0) {
            addTexel(ivec2(-1, 0), pushedFragNormal, f_sum, 3);
            addTexel(ivec2(0, -1), pushedFragNormal, f_sum, 3);
            addTexel(ivec2(-1, -1), pushedFragNormal, f_sum, 1);
        } else {
            addTexel(ivec2(-1, 0), pushedFragNormal, f_sum, 3);
            addTexel(ivec2(0, +1), pushedFragNormal, f_sum, 3);
            addTexel(ivec2(-1, +1), pushedFragNormal, f_sum, 1);
        }
    } else {
        if (int(gl_FragCoord.y) % 2 == 0) {
            addTexel(ivec2(+1, 0), pushedFragNormal, f_sum, 3);
            addTexel(ivec2(0, -1), pushedFragNormal, f_sum, 3);
            addTexel(ivec2(+1, -1), pushedFragNormal, f_sum, 1);
        } else {
            addTexel(ivec2(+1, 0), pushedFragNormal, f_sum, 3);
            addTexel(ivec2(0, +1), pushedFragNormal, f_sum, 3);
            addTexel(ivec2(+1, +1), pushedFragNormal, f_sum, 1);
        }
    }

    if (any(isnan(pushedFragNormal.xyz)) || any(isinf(pushedFragNormal.xyz)) ) {
        return;
    }

    if (pushedFragNormal.xyz != vec3(0) && f_sum > 0) {
        pushedFragNormal.xyz = normalize(pushedFragNormal.xyz);
        pushedFragNormal.w /= f_sum;
    } else {
        pushedFragNormal.w = 0;
    }

    float alpha = originalFragNormal.w;
    alpha = 1 - pow(1 - alpha, 1);
    pushedFragNormal.w = min(1, pushedFragNormal.w * (1 - alpha) + alpha);
    pushedFragNormal.xyz = originalFragNormal.xyz * alpha + pushedFragNormal.xyz * (1 - alpha);
    pushedFragNormal.xyz = normalize(pushedFragNormal.xyz);
//    pushedFragNormal.xyz = (pushedFragNormal.xyz);
}

void main() {
    fragNormal = vec4(0);
    push(fragNormal);
}

}
-->
            </snippet>
        </shader>
    </namespace>
</btf>
